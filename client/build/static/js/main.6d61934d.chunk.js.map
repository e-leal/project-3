{"version":3,"sources":["components/Files/Images/profile-placeholder.png","utils/mutations.js","utils/auth.js","components/Signup/index.js","components/Login/LoginForm.js","components/Nav/Navbar.js","utils/queries.js","components/Jobs/JobCard.js","components/Home/Home.js","utils/localStorage.js","utils/API.js","components/Jobs/Jobcon.js","components/Jobs/JobsHome.js","components/SubmitApplication/index.js","components/ApplicationCard/index.js","components/Jobs/JobPage.js","components/profile/profile.js","components/PostJob/PostJob.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LOGIN_USER","gql","ADD_USER","SAVE_JOB","CREATE_JOB","CREATE_APP","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","console","log","setItem","window","location","assign","removeItem","SignupForm","useState","username","email","password","name","number","employer","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","error","useEffect","handleInputChange","event","target","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","as","defaultValue","Button","disabled","LoginForm","form","className","AppNavbar","showModal","setShowModal","Navbar","expand","id","Container","fluid","Brand","Link","to","Toggle","aria-controls","Collapse","Nav","size","loggedIn","onClick","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","GET_ME","QUERY_JOBS","QUERY_JOB","JobCard","jobs","map","job","_id","company","title","requirements","createdAt","contact","Home","searchedJobs","setSearchedJobs","searchInput","setSearchInput","useQuery","loading","createdJobData","JSON","parse","savedJobIds","jobIdArr","length","stringify","fetch","response","ok","Error","json","items","jobData","JobId","authors","description","Jumbotron","Row","Col","xs","md","e","Jobcon","props","children","JobsHome","me","myJob","createdJobs","SubmitApplication","resume","jobId","pathname","split","createApplication","ApplicationCard","applications","application","status","JobPage","userData","userQueryLoading","meData","jobApplications","isEmployersListing","Profile","method","src","profileplaceholder","alt","role","data-toggle","href","aria-selected","PostJob","createJob","style","clear","paddingTop","marginLeft","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","path","component","HomePage","exact","render","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d61934d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile-placeholder.63b39416.png\";","import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\nmutation addUser($username: String!, $email: String!, $password: String!, $employer: String){\n       addUser(username: $username, email: $email, password:$password, employer: $employer){\n     \ttoken\n       user {\n       \t_id\n       \tusername\n     \t}\n     }\n }\n`;\n\nexport const SAVE_JOB = gql`\n    mutation saveJob($jobId: ID!){\n        saveJob(jobId: $jobId){\n            _id\n            username\n            email\n            employer\n        }\n    }\n`;\n\nexport const SAVE_APPLICATION = gql`\n    mutation saveApplication($applicationId: ID!){\n        saveApplication(applicationId: $applicationId){\n            _id\n            username\n            email\n            employer\n        }\n    }\n`;\n\nexport const CREATE_JOB = gql`\nmutation createJob($company: String!, $title: String!, $contact: String!, $description: String!, $requirements: String!){\n    createJob(company: $company, title: $title, contact: $contact, description: $description, requirements: $requirements){\n        _id\n        company\n        title\n        createdAt\n        contact\n        description\n        requirements\n    }\n}\n`;\n\nexport const CREATE_APP = gql`\nmutation createApplication($resume: String!, $jobId: ID){\n    createApplication(resume: $resume, jobId: $jobId ){\n        _id\n        resume\n        email\n        createdAt\n        status\n        appliedJob{\n            _id\n            company\n            createdAt\n            contact\n            description\n            requirements\n        }\n        comments {\n            username\n            createdAt\n            body\n        }\n    }\n}\n`;\n\nexport const REMOVE_APP = gql`\nmutation removeApplication($appplicationId: ID){\n    removeApplication(applicationId: $applicationId){\n        _id\n        username\n        email\n        employer\n        createdApplications{\n            resume\n            email\n            createdAt\n            status\n            appliedJob{\n                _id\n                company\n                createdAt\n                contact\n                description\n                requirements\n            }\n            comments {\n                username\n                createdAt\n                body\n            }\n        }\n    }\n}\n`;\n\n\nexport const REMOVE_JOB = gql`\nmutation removeJob($jobId: ID){\n    removeJob(jobId: $jobId){\n        _id\n        username\n        email\n        employer\n        createdJobs{\n            company\n            title\n            createdAt\n            contact\n            description\n            requirements\n        }\n    }\n}\n`;\n\n\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    console.log(\"here is our token: \", idToken);\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { ADD_USER } from '../../utils/mutations';\n//import { createUser } from '../utils/API';\nimport Auth from '../../utils/auth';\nimport { useMutation } from '@apollo/react-hooks';\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '', name: '', number: '', employer: (false) });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, {error}] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    \n    const { name, value } = event.target;\n    console.log(name, \" is being changed to: \", value);\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      console.log(\"our user form data is: \", userFormData);\n      const {data} = await addUser({\n        variables: {email: userFormData.email, name: userFormData.name, number: userFormData.number, username: userFormData.username, employer: userFormData.employer, password: userFormData.password}\n      });\n      console.log(\"our data is: \", data)\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n      number: '',\n      name: '',\n      employer: false\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='name'>First &amp; Last Name</Form.Label>\n          <Form.Control\n            type='name'\n            placeholder='Jon Smith'\n            name='name'\n            onChange={handleInputChange}\n            value={userFormData.name}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Phone Number is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='number'>Phone Number</Form.Label>\n          <Form.Control\n            type='number'\n            placeholder='xxx-xxx-xxxx'\n            name='number'\n            onChange={handleInputChange}\n            value={userFormData.number}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Phone Number is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"employer\">Are you an employer?</Form.Label>\n          <Form.Control\n            as=\"select\" name=\"employer\" onChange={handleInputChange}\n            value={userFormData.employer}\n            required defaultValue={false}>\n              <option value={false}>No</option>\n              <option value={true}>Yes</option>\n            </Form.Control>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='primary'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\n\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n\n    const { name, value } = event.target;\n    console.log(name, \" is being changed to: \", value);\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    \n    const form = event.currentTarget;\n    console.log(\"the form is: \", form);\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      console.log(\"our user data is: \", userFormData);\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      console.log(\"our data result is: \", data);\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n              <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                Something went wrong with your login credentials!\n              </Alert>\n              <Form.Group>\n                <Form.Label htmlFor='email'>Email</Form.Label>\n                <Form.Control\n                  type='text'\n                  placeholder='Email'\n                  name='email'\n                  onChange={handleInputChange}\n                  value={userFormData.email}\n                  required\n                />\n                <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label htmlFor='password'>Password</Form.Label>\n                <Form.Control\n                  type='password'\n                  placeholder='Password'\n                  name='password'\n                  onChange={handleInputChange}\n                  value={userFormData.password}\n                  required\n                />\n                <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n              </Form.Group>\n              <Button disabled={!(userFormData.email && userFormData.password)} \n              type='primary' \n              variant='success' \n              className='signup-login-button'>\n                Submit\n              </Button>\n            </Form>\n  </>     \n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from '../Signup';\nimport LoginForm from '../Login/LoginForm';\n\nimport Auth from '../../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar variant='dark' expand='lg' id=\"dark-purple\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            <h1 >Certainly</h1>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto' size='sm'>\n              <Nav.Link as={Link} to='profile' >\n                <h4 className=\"navbar-text\">Profile</h4>\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n              <Nav className='ml-auto' size='sm'></Nav>\n                  <Nav.Link as={Link} to= 'PostJob'>\n                    <h4 className=\"navbar-text\">Post a Job</h4>\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}><h4 className=\"navbar-text\">Logout</h4></Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}><h4>Login</h4></Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;","import gql from 'graphql-tag';\n\nexport const GET_ME = gql`\n{\n    me {\n        _id\n        username\n        email\n        employer\n        number\n        name\n        createdJobs {\n            _id\n            company\n            createdAt\n            title\n            contact\n            description\n            requirements\n        }\n        createdApplications {\n            _id\n            resume\n            createdAt\n            appliedJob {\n                _id\n                company\n            }\n        }\n    }\n}\n`;\n\n\nexport const QUERY_JOBS = gql`\nquery jobs{\n    jobs{\n            _id\n            company\n            createdAt\n            title\n            contact\n            description\n            requirements\n        }\n    }\n  `;\n\n  export const QUERY_JOB = gql`\n  query job($id: ID!) {\n    job(_id: $id) {\n      _id\n      company\n      title\n      createdAt\n      contact\n      description\n      requirements\n      jobApplications {\n        _id\n        createdAt\n        email\n        resume\n        status\n        comments {\n            _id\n            body\n            createdAt\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_APP = gql`\nquery receivedApps($id: ID){\n    receivedApps(id: $id){\n        _id\n        email\n        resume\n        status\n        createdAt\n    }\n}\n`;","import React from 'react'\nimport \"./jobs.css\";\nimport { Link } from 'react-router-dom';\n\nconst JobCard = ({ jobs }) => {\n\n  console.log(jobs)\n  // if (!jobs.length) {\n  //   return <h3>You have no posted jobs!</h3>\n  // }\n  return (\n\n<div>\n  { jobs &&\n  jobs.map((job) => (\n    <Link to={`/jobpage/${job._id}`}>\n    <div className=\"card\">\n      <div className=\"content\">\n        <ul>\n        <li>\n        <strong>Company:</strong> {job.company}\n        </li>\n        <li>\n        <strong>Job Title:</strong> {job.title}\n        </li>\n        <li>\n        <strong>Requirements:</strong> {job.requirements}\n        </li>\n        <li>\n        <strong>Created At:</strong>{job.createdAt}\n        </li>\n        <li>\n        <strong>Contact:</strong> {job.contact}\n        </li>\n\n        </ul>\n\n      </div>\n      </div>\n      </ Link>\n           ))}\n\n    </div>\n  );\n  };\n\n\nexport default JobCard;","import React, { useState, useEffect }  from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../../utils/auth';\nimport { searchCareerJobs } from '../../utils/API';\nimport { saveJobIds, getSavedJobIds } from '../../utils/localStorage';\n//import {REMOVE_BOOK, SAVE_BOOK, ADD_USER, LOGIN_USER} from '../utils/mutations';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { GET_ME, QUERY_JOBS } from '../../utils/queries';\nimport {SAVE_JOB} from '../../utils/mutations';\nimport JobCard from '../Jobs/JobCard';\nimport '../../index.css'\n//import {LOGIN_USER} from '../utils/mutations';\n\nconst Home = () => {\n    // create state for holding returned google api data\n    const [searchedJobs, setSearchedJobs] = useState([]);\n    // create state for holding our search field data\n    const [searchInput, setSearchInput] = useState('');\n\n\n    const {loading, data} = useQuery(QUERY_JOBS);\n    const createdJobData = data?.jobs || [];\n    console.log(createdJobData)\n      //const myJob = createdJobData\n\n      \n  \n    // create state to hold saved bookId values\n    const [savedJobIds, setSavedJobIds] = useState(getSavedJobIds());\n    const [saveJob] = useMutation(SAVE_JOB);\n    // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n    // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n    useEffect(() => {\n      return () => saveJobIds(savedJobIds);\n    });\n  \n    // create method to search for books and set state on form submit\n    const handleFormSubmit = async (event) => {\n      event.preventDefault();\n  \n      if (!searchInput) {\n        return false;\n      }\n  \n      try {\n        const response = await searchCareerJobs(searchInput);\n  \n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n  \n        const { items } = await response.json();\n  \n        const jobData = items.map((job) => ({\n          JobId: job._id,\n          authors: job.title || ['No author to display'],\n          company: job.company,\n          description: job.description//,\n          //image: job.volumeInfo.imageLinks?.thumbnail || '',\n        }));\n  \n        setSearchedJobs(jobData);\n        setSearchInput('');\n      } catch (err) {\n        console.error(err);\n      }\n    };\n  \n    // create function to handle saving a book to our database\n    const handleSaveJob = async (jobId) => {\n      // find the book in `searchedBooks` state by the matching id\n      const jobToSave = searchedJobs.find((job) => job.jobId === jobId);\n      console.log(\"Job to save: \", jobToSave);\n      \n      // get token\n      const token = Auth.loggedIn() ? Auth.getToken() : null;\n      if (!token) {\n        return false;\n      }\n  \n      try {\n        const { data } =  await saveJob({\n          variables: {jobData: {...jobToSave}},\n        });\n        console.log(\"My lovely data: \", data);\n  \n        // if book successfully saves to user's account, save book id to state\n        setSavedJobIds([...savedJobIds, jobToSave.jobId]);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n  \n    return (\n      <>\n        <Jumbotron fluid id='dark-purple' className='text-light center purple-mountain'>\n          <Container>\n            <h3>Find your next job</h3>\n            <Form onSubmit={handleFormSubmit}>\n              <Form.Row>\n                <Col xs={3} md={8}>\n                  <Form.Control\n                    className='center'\n                    name='searchInput'\n                    value={searchInput}\n                    onChange={(e) => setSearchInput(e.target.value)}\n                    type='text'\n                    size=''\n                    placeholder='Search for a Job'\n                  />\n                </Col>\n                <Col xs={12} md={4}>\n                  <Button type='submit' variant='primary' size=''>\n                    Search\n                  </Button>\n                </Col>\n              </Form.Row>\n            </Form>\n          </Container>\n        </Jumbotron>\n  \n        <Container id=\"light-purple\">\n          <h2>\n            {searchedJobs.length\n              ? `Viewing ${searchedJobs.length} results:`\n              : 'Search for a job to begin'}\n          </h2>\n          <div>{loading ? <div>Loading...</div> : <JobCard jobs={createdJobData} /> } </div>\n          {/* <CardColumns>\n            {searchedJobs.map((job) => {\n              return (\n                <Card key={job.jobId} border='dark'>\n                  {job.image ? (\n                    <Card.Img src={job.image} alt={`The cover for ${job.title}`} variant='top' />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{job.title}</Card.Title>\n                    <p className='small'>Employeers: {job.authors}</p>\n                    <Card.Text>{job.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedJobIds?.some((savedJobId) => savedJobId === job.jobId)}\n                        className='btn-block btn-info'\n                        onClick={() => handleSaveJob(job.jobId)}>\n                        {savedJobIds?.some((savedJobId) => savedJobId === job.jobId)\n                          ? 'This job has already been saved!'\n                          : 'Save this Book!'}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              );\n            })}\n          </CardColumns> */}\n        </Container>\n      </>\n    );\n  };\n\n\nexport default Home;","export const getSavedJobIds = () => {\n    const savedJobIds = localStorage.getItem('saved_jobs')\n      ? JSON.parse(localStorage.getItem('saved_jobs'))\n      : [];\n  \n    return savedJobIds;\n  };\n  \n  export const saveJobIds = (jobIdArr) => {\n    if (jobIdArr.length) {\n      localStorage.setItem('saved_jobs', JSON.stringify(jobIdArr));\n    } else {\n      localStorage.removeItem('saved_jobs');\n    }\n  };\n  \n  export const removeJobId = (jobId) => {\n    const savedJobIds = localStorage.getItem('saved_jobs')\n      ? JSON.parse(localStorage.getItem('saved_jobs'))\n      : null;\n  \n    if (!savedJobIds) {\n      return false;\n    }\n  \n    const updatedSavedJobIds = savedJobIds?.filter((savedJobId) => savedJobId !== jobId);\n    localStorage.setItem('saved_jobs', JSON.stringify(updatedSavedJobIds));\n  \n    return true;\n  };\n  ","export const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save job data for a logged in user\nexport const saveJob = (jobData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(jobData),\n  });\n};\n// remove saved book data for a logged in user\nexport const deleteJob = (jobId, token) => {\n  return fetch(`/api/users/jobs/${jobId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchCareerJobs = (query) => {\n    return fetch(`http://api.jobs2careers.com/api/search.php?id=273&pass=HkdyhY4qQUmJXi5p&q=${query}`);\n  };\n  ","import React from \"react\";\nimport \"./jobs.css\";\n\nfunction Jobcon(props) {\n  return <div className=\"jobcon\">{props.children}</div>;\n}\n\nexport default Jobcon;","import React, { useState, useEffect } from 'react'\nimport { Button, Card } from 'react-bootstrap';\nimport Jobcon from './Jobcon';\nimport JobCard from './JobCard';\nimport { Link } from 'react-router-dom';\nimport \"./jobs.css\";\nimport { GET_ME, QUERY_JOBS } from '../../utils/queries';\nimport Auth from '../../utils/auth';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { getSavedJobIds } from '../../utils/localStorage';\n\n\n\n//import Navabar\n\nconst JobsHome = () => {\n    const [userJobData, setUserJobData] = useState({ company: '', createdAt: '', contact: '', description: '', requirements: '' });\n    const [validated] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n\n    // const {loading1, data1} = useQuery(MY_JOBS);\n    //  const myJobData = data1?.user || {};\n    //  console.log(\"my job data is:::: \", myJobData);\n    const {loading, data} = useQuery(GET_ME);\n    const createdJobData = data?.me || [];\n    console.log(createdJobData)\n      const myJob = createdJobData.createdJobs\n    // //  const {createdJobs} = myJob;\n    // console.log(\"our created jobs might be: \", myJob);\n    console.log(\"Our user job data is: \", createdJobData);\n    // const tasks = Object.values(myJob.createdJobs);\n    // console.log(\"my tasks are: \", tasks)\n  \n    // const { data } = await createdJobs({\n    //           variables: { ...userFormData },\n    //      });\n\n    // useEffect(() => {\n    //   if (error) {\n    //     setShowAlert(true);\n    //   } else {\n    //     setShowAlert(false);\n    //   }\n    // }, [error]);\n  \n    // const handleInputChange = (event) => {\n  \n    //   const { name, value } = event.target;\n    //   console.log(name, \" is being changed to: \", value);\n    //   setUserFormData({ ...userFormData, [name]: value });\n    // };\n  \n    // const handleFormSubmit = async (event) => {\n    //   event.preventDefault();\n      \n    //   const form = event.currentTarget;\n    //   console.log(\"the form is: \", form);\n    //   if (form.checkValidity() === false) {\n    //     event.preventDefault();\n    //     event.stopPropagation();\n    //   }\n  \n    //   try {\n    //     console.log(\"our user data is: \", userFormData);\n    //     const { data } = await getSavedJobIds({\n    //       variables: { ...userFormData },\n    //     });\n  \n    //     console.log(\"our data result is: \", data);\n    //     Auth.login(data.login.token);\n    //   } catch (e) {\n    //     console.error(e);\n    //   }\n  \n    //   // clear form values\n    //   setUserFormData({\n    //     email: '',\n    //     password: '',\n    //   });\n    // };\n\n    return (\n    <Jobcon>\n        <section>\n            <div className=\"smallheading\">\n\t\t\t<h3 className=\"card-title\">Jobs you have posted</h3>\n\t\t    </div>\n        </section>\n    <div>{loading ? <div>Loading...</div> : <JobCard jobs={myJob} /> } </div>\n\n    </Jobcon>\n     );\n  }\n\n  \nexport default JobsHome;","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { CREATE_APP } from '../../utils/mutations';\nimport { QUERY_JOB } from '../../utils/queries';\n//import { createUser } from '../utils/API';\nimport Auth from '../../utils/auth';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\nconst SubmitApplication = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ resume: '', jobId: ''  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const jobId = window.location.pathname.split(\"/\")[2];\n\n  const { loading, data } = useQuery(QUERY_JOB, {\n    variables: { id: jobId }\n  });\n\n  const myJob = data?.job || {};\n\n  const [createApplication, {error}] = useMutation(CREATE_APP);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    \n    const { name, value } = event.target;\n    console.log(name, \" is being changed to: \", value);\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    const token = localStorage.getItem('id_token');\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      userFormData.jobId = jobId;\n      console.log(\"our user form data is: \", userFormData);\n      const {data} = await createApplication({\n        variables: {resume: userFormData.resume, jobId: userFormData.jobId}\n      });\n      console.log(\"our data is: \", data)\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      resume: '',\n      jobId: ''\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your Application submission!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='resume'>Resume Link</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='https://docs.google.com/resume.doc'\n            name='resume'\n            onChange={handleInputChange}\n            value={userFormData.resume}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>A resume link is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Button\n          disabled={!(userFormData.resume )}\n          type='primary'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      \n    </>\n  );\n};\n\nexport default SubmitApplication;\n","import React from 'react'\nimport '../Jobs/jobs.css';\nimport { Link } from 'react-router-dom';\n\nconst ApplicationCard = ({ applications }) => {\n\n  console.log(applications)\n  // if (!jobs.length) {\n  //   return <h3>You have no posted jobs!</h3>\n  // }\n  return (\n\n<div>\n  { applications &&\n  applications.map((application) => (\n<div>\n\n   <div className=\"card\">\n      <div className=\"content\">\n        <ul>\n        <li>\n        <strong>Contact:</strong> {application.contact}\n        </li>\n        <li>\n        <strong>Resume Link:</strong> {application.resume}\n        </li>\n        <li>\n        <strong>Status:</strong> {application.status}\n        </li>\n        <li>\n        <strong>Created At:</strong>{application.createdAt}\n        </li>\n\n\n        </ul>\n\n      </div>\n      </div>\n      </ div>\n           ))}\n\n    </div>\n  );\n  };\n\n\nexport default ApplicationCard;","import React, { useState, useEffect } from 'react'\nimport \"./jobs.css\";\nimport { GET_ME, QUERY_JOB } from '../../utils/queries';\nimport Auth from '../../utils/auth';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { Navbar, Nav, Container, Modal, Tab, Button } from 'react-bootstrap';\nimport SubmitApplication from '../SubmitApplication';\nimport Jobcon from '../Jobs/Jobcon';\nimport ApplicationCard from '../ApplicationCard';\n\n\nconst JobPage = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [userJobData, setUserJobData] = useState({ company: '', createdAt: '', contact: '', description: '', requirements: '' });\n  const token = localStorage.getItem('id_token');\n\n    // const {loading1, data1} = useQuery(MY_JOBS);\n    //  const myJobData = data1?.user || {};\n    //  console.log(\"my job data is:::: \", myJobData);\n    // useEffect(() => {\n    //let jobId = window.location.pathname.split(\"/\")[2];\n\n    // })\n    // let jobId = window.location.pathname.split(\"/\")[2];\n    // console.log(\"my job id is\", jobId)\n    // const { loading, data } = useQuery(GET_ME);\n    // const createdJobData = data?.me || [];\n    // console.log(createdJobData)\n    // const myJob = createdJobData.createdJobs\n    // console.log(\"my job is\", myJob)\n    // const filteredJob = myJob.filter((job) => job._id === jobId)\n    // console.log(\"filtered job\", filteredJob)\n    const jobId = window.location.pathname.split(\"/\")[2];\n    const { data: userData, loading:userQueryLoading } = useQuery(GET_ME);\n    const { data: jobData, loading:jobLoading } = useQuery(QUERY_JOB, {\n      variables: { id: jobId }\n    });\n    \n    \n\n    const myJob = jobData?.job || {};\n    const meData = userData?.me || {};\n\n    console.log(\"my job's applications are: \", myJob.jobApplications);\n    console.log(\"Am I an employer? \", meData);\n    // const job = myJob.filter(_id === jobId);\n    //   if (!jobs.length) {\n    //     return <h3>You have no posted jobs!</h3>\n    //   }\n    const isEmployersListing = (myJob.contact == meData.email && meData.employer);\n    console.log(\"EMployer listing check is: \", isEmployersListing);\n    if(!isEmployersListing){\n        return (\n\n            <div>\n                        <div className=\"card2\">\n                            <div className=\"content\">\n                              <div>\n            <ul>\n            <li>\n            <strong>Company:</strong> {myJob.company}\n            </li>\n            <li>\n            <strong>Job Title:</strong> {myJob.title}\n            </li>\n            <li>\n            <strong>Requirements:</strong> {myJob.requirements}\n            </li>\n            <li>\n            <strong>Created At:</strong>{myJob.createdAt}\n            </li>\n            <li>\n            <strong>Contact:</strong> {myJob.contact}\n            </li>\n\n            </ul>\n            </div>\n            <div>\n            <Button\n              type='primary'\n              variant='success' onClick={() => setShowModal(true)}>\n              Submit Application Here!\n            </Button>\n            </div>\n          </div>\n          \n                        </div>\n                    \n                    {/* set modal data up */}\n          <Modal\n            size='lg'\n            show={showModal}\n            onHide={() => setShowModal(false)}\n            aria-labelledby='submitapplication-modal'>\n            {/* tab container to do either signup or login component */}\n              <Modal.Header closeButton>\n                <Modal.Title id='submitapplication-modal'>\n                  Enter Resume Link\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                    <SubmitApplication handleModalClose={() => setShowModal(false)} />\n              </Modal.Body>\n          </Modal>    \n            </div>\n            \n        );\n    }\n      \n    else {\n      return (\n\n          <div>\n            <div className=\"card2\">\n                <div className=\"content\">\n                  <div>\n                    <ul>\n                    <li>\n                    <strong>Company:</strong> {myJob.company}\n                    </li>\n                    <li>\n                    <strong>Job Title:</strong> {myJob.title}\n                    </li>\n                    <li>\n                    <strong>Requirements:</strong> {myJob.requirements}\n                    </li>\n                    <li>\n                    <strong>Created At:</strong>{myJob.createdAt}\n                    </li>\n                    <li>\n                    <strong>Contact:</strong> {myJob.contact}\n                    </li>\n            \n                    </ul>\n                  </div>\n                <div>\n              </div>\n            </div>\n          </div>\n        <Jobcon>\n          <section>\n              <div className=\"smallheading\">\n                <h3 className=\"card-title\">Applications you have received</h3>\n              </div>\n          </section>\n          <div>\n            {userQueryLoading ? <div>Loading...</div> : <ApplicationCard applications={myJob.jobApplications} /> } \n          </div>\n        </Jobcon>\n      </div>\n      );\n    }\n  }\n    export default JobPage;","import React, { useState, useEffect } from 'react'\nimport profileplaceholder from \"../Files/Images/profile-placeholder.png\";\nimport { Container } from 'react-bootstrap';\nimport \"./profile.css\";\nimport { Link } from \"react-router-dom\";\nimport { GET_ME } from '../../utils/queries';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst Profile = () => {\n    const [userFormData, setUserFormData] = useState({ email: '', password: '', name: '', number: '' });\n    const [validated] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n  \n    const {loading, data} = useQuery(GET_ME);\n    const userData = data?.me || {};\n    console.log(\"our current user's data is: \", userData);\n\n    if(loading){\n        return <h2>LOADING...</h2>;\n    }\n\n return (\n      <div className=\"emp-profile\">\n      <form method=\"post\">\n          <div className=\"row\">\n              <div className=\"col-md-4\">\n                  <div className=\"profile-img\">\n                      <img src= { profileplaceholder } alt=\"\"/>\n                      <div className=\"file btn btn-lg btn-primary\">\n                          Change Photo\n                          <input type=\"file\" name=\"file\"/>\n                      </div>\n                  </div>\n              </div>\n              <div className=\"col-md-6\">\n                  <div className=\"profile-head\">\n                              <h5>\n                                {userData.username}\n                              </h5>\n                              <h6>\n                                  Web Developer and Designer\n                              </h6>\n                              <p className=\"proile-rating\">RANKINGS : <span>10/10</span></p>\n                      <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n                          <li className=\"nav-item\">\n                              <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">About</a>\n                          </li>\n                          <li className=\"nav-item\">\n                              <a className=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Timeline</a>\n                          </li>\n                      </ul>\n                  </div>\n              </div>\n              <div className=\"col-md-2\">\n                  <input type=\"submit\" className=\"profile-edit-btn\" name=\"btnAddMore\" value=\"Edit Profile\"/>\n              </div>\n          </div>\n          <div className=\"row\">\n              <div className=\"col-md-4\">\n                  <div className=\"profile-work\">\n                      <p>WORK LINK</p>\n                      <a href=\"\">Profile</a><br/>\n                      <a href=\"\">Bootsnipp Profile</a><br/>\n                      <a href=\"\">Bootply Profile</a>\n                      <p>SKILLS</p>\n                      <a href=\"\">Web Designer</a><br/>\n                      <a href=\"\">Web Developer</a><br/>\n                      <a href=\"\">WordPress</a><br/>\n                      <a href=\"\">WooCommerce</a><br/>\n                      <a href=\"\">PHP, .Net</a><br/>\n                  </div>\n              </div>\n              <div className=\"col-md-8\">\n                  <div className=\"tab-content profile-tab\" id=\"myTabContent\">\n                      <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>User Id</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>{userData.username}</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Name</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>{userData.name}</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Email</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>{userData.email}</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Phone</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>{userData.number}</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Profession</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>Web Developer and Designer</p>\n                                      </div>\n                                  </div>\n                      </div>\n                      <div className=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\">\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Experience</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>Expert</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Salary</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>89,000/yr</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Total Projects</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>230</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>English Level</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>Expert</p>\n                                      </div>\n                                  </div>\n                                  <div className=\"row\">\n                                      <div className=\"col-md-6\">\n                                          <label>Availability</label>\n                                      </div>\n                                      <div className=\"col-md-6\">\n                                          <p>6 months</p>\n                                      </div>\n                                  </div>\n                          <div className=\"row\">\n                              <div className=\"col-md-12\">\n                                  <label>Your Bio</label><br/>\n                                  <p>Your detail description</p>\n                              </div>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </form>           \n  </div>\n    );\n };\n\nexport default Profile;","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CREATE_JOB } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\nimport \"./PostJob.css\";\n\n//import Navbar\n\nconst PostJob = () => {\n  const [userFormData, setUserFormData] = useState(\n    {\n    company: '',\n    title: '',\n    requirements: '',\n    contact: '',\n    description: '' \n  });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [createJob, { error }] = useMutation(CREATE_JOB);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n  const handleInputChange = (event) => {\n\n    const { name, value } = event.target;\n    console.log(name, \" is being changed to: \", value);\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    \n    const form = event.currentTarget;\n    const token = localStorage.getItem('id_token');\n    console.log(\"the form is: \", form);\n    // console.log(\"the token is: \", token);\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      console.log(\"our user data is: \", userFormData);\n      const { data } = await createJob({\n        variables: { ...userFormData },\n      });\n\n      console.log(\"our data result is: \", data);\n      Auth.login(token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setUserFormData({\n      company: '',\n      title: '',\n      requirements: '',\n      email: '', \n      description: ''\n    });\n  };\n\n    return (\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n      <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n        Something went wrong with your Job Posting!\n      </Alert>\n      <div className=\"div\">\n\n        <div className=\"container-fluid containerstyle\">\n          <div style={{clear : \"both\", paddingTop: \"40px\"}}>\n            <p className=\"lead jobtext\"  style={{marginLeft: \"39%\"}}>\n              Reach quality candidates\n            </p>\n          </div>\n\n          <form className=\"jobform\">\n            <div className=\"form-group filter-message-box\">\n                <i className=\"fa fa-building\"> </i>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"company\"\n                placeholder=\"Company\"\n                onChange={handleInputChange}\n                name=\"company\"\n              />\n            </div>\n            <div className=\"form-group filter-message-box\">\n            <i className=\"fa fa-suitcase\"> </i>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                placeholder=\"Job title\"\n                onChange={handleInputChange}\n                name=\"title\"\n              />\n            </div>\n\n            <div className=\"form-group filter-message-box\">\n            <i className=\"fa fa-map-marker\"> </i>\n              { <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"requirements\"\n                placeholder=\"Responsiablitys\"\n                onChange={handleInputChange}\n                name=\"requirements\"\n              /> }\n            </div>\n            <div className=\"form-group filter-message-box\">\n                <i className=\"fa fa-building\"> </i>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"contact\"\n                placeholder=\"Contact Email\"\n                onChange={handleInputChange}\n                name=\"contact\"\n              />\n            </div>\n            <div className=\"form-group filter-message-box\">\n                <i className=\"fa fa-building\"> </i>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                placeholder=\"Job Description\"\n                onChange={handleInputChange}\n                name=\"description\"\n              />\n            </div>\n            \n            <Button disabled={!(userFormData.company && userFormData.title && userFormData.requirements && userFormData.contact)}\n              type=\"primary\"\n              variant=\"success\"\n              className=\"btn btn-lg submitbutton wow-page__submit-button\">\n              Post Job\n            </Button>\n          </form>\n        </div>\n      </div>\n      </Form>\n    );\n  }\n\nexport default PostJob;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport  ApolloClient from 'apollo-boost';\nimport NavBar from './components/Nav/Navbar';\n/*\n***********\nAPP COMPONENT IMPORTS \n***********\n*/\nimport HomePage from './components/Home/Home';\n// import RecruiterDashboard from \"../recruiter/Dashboard/Dashboard\";\nimport JobsHome from \"./components/Jobs/JobsHome\";\nimport JobPage from \"./components/Jobs/JobPage\";\n// import JobDetailedView from './components/Jobs/JobCard';\n// import SearchedJobs from \"./pages/SearchJobs\";\nimport Profile from './components/profile/profile';\n// import Message from \"../Message/Message\";\n// import CompanyPage from \"../Jobs/CompanyPage\";\n// import JobSaved from \"../Jobs/JobSaved\";\nimport PostJob from './components/PostJob/PostJob';\n// import PostJobfirst from \"../PostJob/PostJobfirst\";\n// import SavedJobsHome from \"../Jobs/SavedJobsHome\";\n// import JobsBySkill from \"../Jobs/JobsBySkill\";\n// import PublicProfile from \"../profile/publicprofile\";\n// //  import ApplicantHome from \"../src/components/Home\";\n// import RecruiterHome from \"./components/Home/RecruiterHome\";\n// import ListedJobs from \"../recruiter/listedJobs\";\n// import Recruitersignup from \"../Recruitersignup/Recruitersignup\";\n// // import ApplyJob from \"../ApplyJob/Applyjob\";\n// // import JobApplicantsHome from \"../recruiter/jobApplicantsHome\";\n// import RecruiterProfile from \"../profile/RecruiterProfile\";\n\nconst client = new ApolloClient({\n  request: operation => {\n    console.log(\"007 operation: \", operation)\n    const token = localStorage.getItem('id_token');\n    console.log(\"our client app.js is saying our token is: \", token)\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n  uri: '/graphql'\n});\n\n\nfunction App (){\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <NavBar />\n      <Switch>\n                <Route path=\"/\" component={HomePage} exact/>\n                {/* <Route path=\"/recruiter\" component={RecruiterDashboard} exact/> */}\n                <Route path=\"/jobshome\" component={JobsHome} exact />\n                <Route path=\"/jobpage/:id\" component={JobPage} exact />\n                {/* <Route path=\"/jobdetailedview\" component={JobDetailedView} exact /> */}\n                {/* <Route path=\"/postedjobs\" component={ListedJobs} exact /> */}\n                <Route path=\"/profile\" component={Profile} exact />\n                {/* <Route path=\"/message\" component={Message} exact />\n                <Route path=\"/jobshome/savedjobs\" component={SavedJobsHome} exact />\n                <Route path=\"/searchedjobs/:criterion/:lat/:long\" component={SearchedJobs} exact />\n                <Route path=\"/searchedjobs/:title/:location\" component={SearchedJobs} exact />\n                <Route path=\"/jobsbyskill\" component={JobsBySkill} exact />\n                <Route path=\"/public-profile/:id\" component={PublicProfile} exact />\n                {/* <Route path=\"/applicanthome\" component={ApplicantHome} exact /> */}\n                {/* <Route path=\"/applicantconnection\" component={ApplicantConnection} exact /> */}\n                {/* <Route path=\"/recruiterhome\" component={RecruiterHome} exact /> */}\n                {/* <Route path=\"/recruiterconnection\" component={RecruiterConnection} exact /> */}\n                {/* <Route path=\"/jobsaved\" component={JobSaved} exact />*/\n                <Route path=\"/postjob\" component={PostJob} exact />\n                // <Route path=\"/postjobfirst\" component={PostJobfirst} exact />\n                // <Route path=\"/recruitersignup\" component={Recruitersignup} exact />\n                // <Route path=\"/apply/:id\" component={ApplyJob} exact /> */}\n                // {/* <Route path=\"/jobapplicant/:jobId\" component={JobApplicantsHome} exact /> */}\n                /* <Route path=\"/jobsaved\" component={JobSaved} exact />\n                <Route path=\"/companypage/:id\" component={CompanyPage} exact />\n                <Route path=\"/recruiterprofile\" component={RecruiterProfile} exact /> */}\n                <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n               \n            </Switch>\n      </Router>\n      </ApolloProvider>\n  );\n} \n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}