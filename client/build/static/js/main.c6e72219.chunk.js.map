{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/Signup/index.js","components/Login/LoginForm.js","components/Nav/Navbar.js","utils/API.js","utils/localStorage.js","components/Searchbar/index.js","pages/SearchJobs.js","components/Home/Home.js","components/Conduct.js","App.js","serviceWorker.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_JOB","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","console","log","setItem","window","location","assign","removeItem","SignupForm","useState","username","email","password","employer","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","error","useEffect","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","as","defaultValue","Button","disabled","LoginForm","form","className","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","Link","to","Toggle","aria-controls","Collapse","id","Nav","loggedIn","onClick","logout","Modal","size","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","searchCareerJobs","query","fetch","getSavedJobIds","JSON","parse","saveJobIds","jobIdArr","length","stringify","JobSearchBar","props","state","searchJobName","latitude","longitude","onChangeSearchJob","bind","onChangeLocation","checkret","route","setState","searchLocation","coordinates","e","href","Component","SearchJobs","searchedJobs","setSearchedJobs","searchInput","setSearchInput","savedJobIds","setSavedJobIds","saveJob","response","ok","Error","json","items","jobData","map","job","JobId","_id","authors","title","company","description","handleSaveJob","jobId","jobToSave","find","Jumbotron","Searchbar","CardColumns","Card","key","border","image","Img","src","alt","Text","some","savedJobId","Home","Row","Col","xs","md","Conduct","currentPage","handlePageChange","Signup","renderPage","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"ihHAEO,IAAMA,EAAaC,IAAH,KAYVC,EAAWD,IAAH,KAYRE,EAAWF,IAAH,K,GAWWA,IAAH,KAWHA,IAAH,KAcGA,IAAH,KAyBGA,IAAH,KA+BGA,IAAH,K,uBCrER,M,qGA1CX,OAAOG,YAAOC,KAAKC,c,iCAMnB,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,qCAI1BA,GACb,IAEE,OADgBH,YAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,iCAMT,OAAOC,aAAaC,QAAQ,c,4BAGxBC,GACJC,QAAQC,IAAI,sBAAuBF,GAEnCF,aAAaK,QAAQ,WAAYH,GACjCI,OAAOC,SAASC,OAAO,O,+BAKvBR,aAAaS,WAAW,YAExBH,OAAOC,SAASC,OAAO,S,MCqFZE,EA3HI,WAAM,MAEiBC,mBAAS,CAAEC,SAAU,GAAIC,MAAO,GAAIC,SAAU,GAAIC,SAAU,KAF7E,mBAEhBC,EAFgB,KAEFC,EAFE,OAIHN,oBAAS,GAAtBO,EAJgB,sBAMWP,oBAAS,GANpB,mBAMhBQ,EANgB,KAMLC,EANK,OAQIC,sBAAYhC,GARhB,mBAQhBiC,EARgB,KAQNC,EARM,KAQNA,MAEjBC,qBAAU,WAENJ,IADEG,KAKH,CAACA,IAEJ,IAAME,EAAoB,SAACC,GAAW,IAAD,EAEXA,EAAMC,OAAtBC,EAF2B,EAE3BA,KAAMC,EAFqB,EAErBA,MACd1B,QAAQC,IAAIwB,EAAM,yBAA0BC,GAC5CZ,EAAgB,2BAAKD,GAAN,kBAAqBY,EAAOC,MAIvCC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACvBL,EAAMM,kBAIuB,IADhBN,EAAMO,cACVC,kBACPR,EAAMM,iBACNN,EAAMS,mBAPe,kBAWAb,EAAQ,CAC3Bc,UAAU,eAAKpB,KAZI,gBAWdqB,EAXc,EAWdA,KAGPlC,QAAQC,IAAI,gBAAiBiC,GAC7BC,EAAKC,MAAMF,EAAKf,QAAQ5B,OAfH,kDAiBrBS,QAAQoB,MAAR,MACAH,GAAa,GAlBQ,QAqBvBH,EAAgB,CACdL,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,SAAU,KAzBW,0DAAH,sDA6BtB,OACE,oCAEE,kBAACyB,EAAA,EAAD,CAAMC,YAAU,EAACvB,UAAWA,EAAWwB,SAAUZ,GAE/C,kBAACa,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMzB,GAAa,IAAQ0B,KAAM3B,EAAW4B,QAAQ,UAAhF,0CAIA,kBAACP,EAAA,EAAKQ,MAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,YAApB,YACA,kBAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,OACLC,YAAY,gBACZzB,KAAK,WACL0B,SAAU7B,EACVI,MAAOb,EAAaJ,SACpB2C,UAAQ,IAEV,kBAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,WAA5B,0BAGF,kBAACZ,EAAA,EAAKQ,MAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,SAApB,SACA,kBAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,QACLC,YAAY,qBACZzB,KAAK,QACL0B,SAAU7B,EACVI,MAAOb,EAAaH,MACpB0C,UAAQ,IAEV,kBAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,WAA5B,uBAGF,kBAACZ,EAAA,EAAKQ,MAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,YAApB,YACA,kBAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,WACLC,YAAY,gBACZzB,KAAK,WACL0B,SAAU7B,EACVI,MAAOb,EAAaF,SACpByC,UAAQ,IAEV,kBAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,WAA5B,0BAEF,kBAACZ,EAAA,EAAKQ,MAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,YAApB,wBACA,kBAACV,EAAA,EAAKW,QAAN,CACEM,GAAG,SAAS7B,KAAK,WAAW0B,SAAU7B,EACtCI,MAAOb,EAAaD,SACpBwC,UAAQ,EAACG,aAAa,SACpB,4BAAQ7B,MAAM,SAAd,MACA,4BAAQA,MAAM,QAAd,SAGN,kBAAC8B,EAAA,EAAD,CACEC,WAAY5C,EAAaJ,UAAYI,EAAaH,OAASG,EAAaF,UACxEsC,KAAK,SACLL,QAAQ,WAHV,aCXOc,G,OAlGG,WAAO,IAAD,EACkBlD,mBAAS,CAAEE,MAAO,GAAIC,SAAU,KADlD,mBACfE,EADe,KACDC,EADC,OAEFN,oBAAS,GAAtBO,EAFe,sBAGYP,oBAAS,GAHrB,mBAGfQ,EAHe,KAGJC,EAHI,OAKKC,sBAAYlC,GALjB,mBAKfoD,EALe,KAKNhB,EALM,KAKNA,MAEhBC,qBAAU,WAENJ,IADEG,KAKH,CAACA,IAEJ,IAAME,EAAoB,SAACC,GAAW,IAAD,EAEXA,EAAMC,OAAtBC,EAF2B,EAE3BA,KAAMC,EAFqB,EAErBA,MACd1B,QAAQC,IAAIwB,EAAM,yBAA0BC,GAC5CZ,EAAgB,2BAAKD,GAAN,kBAAqBY,EAAOC,MAGvCC,EAAgB,uCAAG,WAAOJ,GAAP,mBAAAK,EAAA,6DACvBL,EAAMM,iBAEA8B,EAAOpC,EAAMO,cACnB9B,QAAQC,IAAI,gBAAiB0D,IACA,IAAzBA,EAAK5B,kBACPR,EAAMM,iBACNN,EAAMS,mBAPe,SAWrBhC,QAAQC,IAAI,qBAAsBY,GAXb,SAYEuB,EAAM,CAC3BH,UAAU,eAAMpB,KAbG,gBAYbqB,EAZa,EAYbA,KAIRlC,QAAQC,IAAI,uBAAwBiC,GACpCC,EAAKC,MAAMF,EAAKE,MAAM7C,OAjBD,kDAmBrBS,QAAQoB,MAAR,MAnBqB,QAuBvBN,EAAgB,CACdJ,MAAO,GACPC,SAAU,KAzBW,0DAAH,sDA6BtB,OAEE,yBAAKiD,UAAU,eACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,gBAAd,yBACA,wBAAIA,UAAU,sBAAd,sBACE,kBAACvB,EAAA,EAAD,CAAMC,YAAU,EAACvB,UAAWA,EAAWwB,SAAUZ,GAC/C,kBAACa,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMzB,GAAa,IAAQ0B,KAAM3B,EAAW4B,QAAQ,UAAhF,qDAGA,kBAACP,EAAA,EAAKQ,MAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,SAApB,SACA,kBAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,OACLC,YAAY,QACZzB,KAAK,QACL0B,SAAU7B,EACVI,MAAOb,EAAaH,MACpB0C,UAAQ,IAEV,kBAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,WAA5B,uBAGF,kBAACZ,EAAA,EAAKQ,MAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,YAApB,YACA,kBAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,WACLC,YAAY,WACZzB,KAAK,WACL0B,SAAU7B,EACVI,MAAOb,EAAaF,SACpByC,UAAQ,IAEV,kBAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,WAA5B,0BAEF,kBAACO,EAAA,EAAD,CAAQC,WAAY5C,EAAaH,OAASG,EAAaF,UAAWsC,KAAK,SAASL,QAAQ,UAAUgB,UAAU,uBAA5G,gBCpBCC,G,OApEG,WAAM,MAEYrD,oBAAS,GAFrB,mBAEfsD,EAFe,KAEJC,EAFI,KAItB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOrB,QAAQ,OAAOsB,OAAO,MACtC,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACJ,EAAA,EAAOK,MAAR,CAAcf,GAAIgB,IAAMC,GAAG,KAA3B,aAGA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,WAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,UAClB,kBAACC,EAAA,EAAD,CAAKhB,UAAU,WACb,kBAACgB,EAAA,EAAIN,KAAL,CAAUhB,GAAIgB,IAAMC,GAAG,KAAvB,mBAICpC,EAAK0C,WACJ,oCACE,kBAACD,EAAA,EAAIN,KAAL,CAAUhB,GAAIgB,IAAMC,GAAG,UAAvB,kCAGA,kBAACK,EAAA,EAAIN,KAAL,CAAUQ,QAAS3C,EAAK4C,QAAxB,WAGF,kBAACH,EAAA,EAAIN,KAAL,CAAUQ,QAAS,kBAAMf,GAAa,KAAtC,qBAOV,kBAACiB,EAAA,EAAD,CACEC,KAAK,KACLtC,KAAMmB,EACNoB,OAAQ,kBAAMnB,GAAa,IAC3BoB,kBAAgB,gBAEhB,kBAACC,EAAA,EAAIjB,UAAL,CAAekB,iBAAiB,SAC9B,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,CAAab,GAAG,gBACd,kBAACC,EAAA,EAAD,CAAKhC,QAAQ,SACX,kBAACgC,EAAA,EAAIa,KAAL,KACE,kBAACb,EAAA,EAAIN,KAAL,CAAUoB,SAAS,SAAnB,UAEF,kBAACd,EAAA,EAAIa,KAAL,KACE,kBAACb,EAAA,EAAIN,KAAL,CAAUoB,SAAS,UAAnB,eAKR,kBAACV,EAAA,EAAMW,KAAP,KACE,kBAACP,EAAA,EAAIQ,QAAL,KACE,kBAACR,EAAA,EAAIS,KAAL,CAAUH,SAAS,SACjB,kBAAC,EAAD,CAAWI,iBAAkB,kBAAM/B,GAAa,OAElD,kBAACqB,EAAA,EAAIS,KAAL,CAAUH,SAAS,UACjB,kBAAC,EAAD,CAAYI,iBAAkB,kBAAM/B,GAAa,c,mCCjEpDgC,EAAmB,SAACC,GAC7B,OAAOC,MAAM,6EAAD,OAA8ED,KCHjFE,EAAiB,WAK1B,OAJoBrG,aAAaC,QAAQ,cACrCqG,KAAKC,MAAMvG,aAAaC,QAAQ,eAChC,IAKOuG,EAAa,SAACC,GACrBA,EAASC,OACX1G,aAAaK,QAAQ,aAAciG,KAAKK,UAAUF,IAElDzG,aAAaS,WAAW,e,4BCqEfmG,G,oDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAO,CACVC,cAAgB,GAChBC,SAAU,GACVC,UAAU,IAGZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,MAAQ,EAAKA,MAAMH,KAAX,gBAZI,E,8DAeDzF,GACdlC,KAAK+H,SAAS,CACVR,cAAgBrF,EAAMC,OAAOE,U,uCAIpBH,GACblC,KAAK+H,SAAS,CACVC,eAAiB9F,EAAMC,OAAOE,U,+BAI7BQ,GAEPlC,QAAQC,IAAI,WAAWiC,GACvB7C,KAAK+H,SAAS,CACZP,SAAU3E,EAAKoF,YAAYT,SAC3BC,UAAU5E,EAAKoF,YAAYR,c,4BAKzBS,GACJA,EAAE1F,iBACF7B,QAAQC,IAAI,QAAQZ,KAAKqH,OACrBrH,KAAKsH,MAAMC,eAAiBvH,KAAKsH,MAAME,UAAYxH,KAAKsH,MAAMG,UAChE3G,OAAOC,SAASoH,KAAhB,wBAAsCnI,KAAKsH,MAAMC,cAAjD,YAAkEvH,KAAKsH,MAAME,SAA7E,YAAyFxH,KAAKsH,MAAMG,WAIpG9G,QAAQC,IAAI,yC,+BAMd,OACE,yBAAK2D,UAAU,cACf,8BACA,yBAAKA,UAAU,OACf,yBAAKA,UAAU,YACT,2BAAOX,KAAK,OAAOC,YAAY,cAAcU,UAAY,YAAYlC,MAAOrC,KAAKsH,MAAMC,cAAezD,SAAU9D,KAAK0H,kBAAmB3D,UAAQ,KAGtJ,yBAAKQ,UAAU,+BAIf,yBAAKA,UAAU,yBAEf,4BAAQX,KAAK,SAAS6B,QAASzF,KAAK8H,OAApC,kB,GAlEqBM,aC+IZC,GAzII,WAAM,MAEiBlH,mBAAS,IAF1B,mBAEhBmH,EAFgB,KAEFC,EAFE,OAIepH,mBAAS,IAJxB,mBAIhBqH,EAJgB,KAIHC,EAJG,OAOetH,mBAAS0F,KAPxB,mBAOhB6B,EAPgB,KAOHC,EAPG,OAQL9G,sBAAY/B,GAAvB8I,EARgB,oBAWvB5G,qBAAU,WACR,OAAO,kBAAMgF,EAAW0B,OAI1B,IAAMpG,EAAgB,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,yDACvBL,EAAMM,iBAEDgG,EAHkB,0CAId,GAJc,gCAQE9B,EAAiB8B,GARnB,WAQfK,EARe,QAUPC,GAVO,sBAWb,IAAIC,MAAM,yBAXG,wBAcGF,EAASG,OAdZ,iBAcbC,EAda,EAcbA,MAEFC,EAAUD,EAAME,KAAI,SAACC,GAAD,MAAU,CAClCC,MAAOD,EAAIE,IACXC,QAASH,EAAII,OAAS,CAAC,wBACvBC,QAASL,EAAIK,QACbC,YAAaN,EAAIM,gBAInBnB,EAAgBW,GAChBT,EAAe,IAzBM,kDA2BrB9H,QAAQoB,MAAR,MA3BqB,0DAAH,sDAgChB4H,EAAa,uCAAG,WAAOC,GAAP,mBAAArH,EAAA,yDAEdsH,EAAYvB,EAAawB,MAAK,SAACV,GAAD,OAASA,EAAIQ,QAAUA,KAC3DjJ,QAAQC,IAAI,gBAAiBiJ,GAGf/G,EAAK0C,WAAa1C,EAAK7C,WAAa,KAN9B,0CAQX,GARW,gCAYM2I,EAAQ,CAC9BhG,UAAW,CAACsG,QAAQ,eAAKW,MAbT,gBAYVhH,EAZU,EAYVA,KAGRlC,QAAQC,IAAI,mBAAoBiC,GAGhC8F,EAAe,GAAD,mBAAKD,GAAL,CAAkBmB,EAAUD,SAlBxB,kDAoBlBjJ,QAAQoB,MAAR,MApBkB,0DAAH,sDAwBnB,OACE,oCACE,kBAACgI,EAAA,EAAD,CAAWhF,OAAK,EAACR,UAAU,sBACzB,kBAACO,EAAA,EAAD,KACE,gDACA,kBAAC9B,EAAA,EAAD,CAAME,SAAUZ,GACd,kBAAC0H,GAAD,SAsBN,kBAAClF,EAAA,EAAD,KACE,4BACGwD,EAAapB,OAAb,kBACcoB,EAAapB,OAD3B,aAEG,6BAEN,kBAAC+C,EAAA,EAAD,KACG3B,EAAaa,KAAI,SAACC,GACjB,OACE,kBAACc,EAAA,EAAD,CAAMC,IAAKf,EAAIQ,MAAOQ,OAAO,QAC1BhB,EAAIiB,MACH,kBAACH,EAAA,EAAKI,IAAN,CAAUC,IAAKnB,EAAIiB,MAAOG,IAAG,wBAAmBpB,EAAII,OAASjG,QAAQ,QACnE,KACJ,kBAAC2G,EAAA,EAAK5D,KAAN,KACE,kBAAC4D,EAAA,EAAK/D,MAAN,KAAaiD,EAAII,OACjB,uBAAGjF,UAAU,SAAb,YAA+B6E,EAAIG,SACnC,kBAACW,EAAA,EAAKO,KAAN,KAAYrB,EAAIM,aACf5G,EAAK0C,YACJ,kBAACrB,EAAA,EAAD,CACEC,SAAQ,OAAEsE,QAAF,IAAEA,OAAF,EAAEA,EAAagC,MAAK,SAACC,GAAD,OAAgBA,IAAevB,EAAIQ,SAC/DrF,UAAU,qBACVkB,QAAS,kBAAMkE,EAAcP,EAAIQ,UACrB,OAAXlB,QAAW,IAAXA,OAAA,EAAAA,EAAagC,MAAK,SAACC,GAAD,OAAgBA,IAAevB,EAAIQ,UAClD,mCACA,4B,mBCcXgB,GAzIF,WAAM,MAEyBzJ,mBAAS,IAFlC,mBAERmH,EAFQ,KAEMC,EAFN,OAIuBpH,mBAAS,IAJhC,mBAIRqH,EAJQ,KAIKC,EAJL,OAOuBtH,mBAAS0F,KAPhC,mBAOR6B,EAPQ,KAOKC,EAPL,OAQG9G,sBAAY/B,GAAvB8I,EARQ,oBAWf5G,qBAAU,WACR,OAAO,kBAAMgF,EAAW0B,OAI1B,IAAMpG,EAAgB,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,yDACvBL,EAAMM,iBAEDgG,EAHkB,0CAId,GAJc,gCAQE9B,EAAiB8B,GARnB,WAQfK,EARe,QAUPC,GAVO,sBAWb,IAAIC,MAAM,yBAXG,wBAcGF,EAASG,OAdZ,iBAcbC,EAda,EAcbA,MAEFC,EAAUD,EAAME,KAAI,SAACC,GAAD,MAAU,CAClCC,MAAOD,EAAIE,IACXC,QAASH,EAAII,OAAS,CAAC,wBACvBC,QAASL,EAAIK,QACbC,YAAaN,EAAIM,gBAInBnB,EAAgBW,GAChBT,EAAe,IAzBM,kDA2BrB9H,QAAQoB,MAAR,MA3BqB,0DAAH,sDAgChB4H,EAAa,uCAAG,WAAOC,GAAP,mBAAArH,EAAA,yDAEdsH,EAAYvB,EAAawB,MAAK,SAACV,GAAD,OAASA,EAAIQ,QAAUA,KAC3DjJ,QAAQC,IAAI,gBAAiBiJ,GAGf/G,EAAK0C,WAAa1C,EAAK7C,WAAa,KAN9B,0CAQX,GARW,gCAYM2I,EAAQ,CAC9BhG,UAAW,CAACsG,QAAQ,eAAKW,MAbT,gBAYVhH,EAZU,EAYVA,KAGRlC,QAAQC,IAAI,mBAAoBiC,GAGhC8F,EAAe,GAAD,mBAAKD,GAAL,CAAkBmB,EAAUD,SAlBxB,kDAoBlBjJ,QAAQoB,MAAR,MApBkB,0DAAH,sDAwBnB,OACE,oCACE,kBAACgI,EAAA,EAAD,CAAWhF,OAAK,EAACR,UAAU,sBACzB,kBAACO,EAAA,EAAD,KACE,gDACA,kBAAC9B,EAAA,EAAD,CAAME,SAAUZ,GACd,kBAACU,EAAA,EAAK6H,IAAN,KACE,kBAACC,GAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAChI,EAAA,EAAKW,QAAN,CACEvB,KAAK,cACLC,MAAOmG,EACP1E,SAAU,SAACoE,GAAD,OAAOO,EAAeP,EAAE/F,OAAOE,QACzCuB,KAAK,OACLgC,KAAK,KACL/B,YAAY,sBAGhB,kBAACiH,GAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC7G,EAAA,EAAD,CAAQP,KAAK,SAASL,QAAQ,UAAUqC,KAAK,MAA7C,sBASV,kBAACd,EAAA,EAAD,KACE,4BACGwD,EAAapB,OAAb,kBACcoB,EAAapB,OAD3B,aAEG,6BAEN,kBAAC+C,EAAA,EAAD,KACG3B,EAAaa,KAAI,SAACC,GACjB,OACE,kBAACc,EAAA,EAAD,CAAMC,IAAKf,EAAIQ,MAAOQ,OAAO,QAC1BhB,EAAIiB,MACH,kBAACH,EAAA,EAAKI,IAAN,CAAUC,IAAKnB,EAAIiB,MAAOG,IAAG,wBAAmBpB,EAAII,OAASjG,QAAQ,QACnE,KACJ,kBAAC2G,EAAA,EAAK5D,KAAN,KACE,kBAAC4D,EAAA,EAAK/D,MAAN,KAAaiD,EAAII,OACjB,uBAAGjF,UAAU,SAAb,YAA+B6E,EAAIG,SACnC,kBAACW,EAAA,EAAKO,KAAN,KAAYrB,EAAIM,aACf5G,EAAK0C,YACJ,kBAACrB,EAAA,EAAD,CACEC,SAAQ,OAAEsE,QAAF,IAAEA,OAAF,EAAEA,EAAagC,MAAK,SAACC,GAAD,OAAgBA,IAAevB,EAAIQ,SAC/DrF,UAAU,qBACVkB,QAAS,kBAAMkE,EAAcP,EAAIQ,UACrB,OAAXlB,QAAW,IAAXA,OAAA,EAAAA,EAAagC,MAAK,SAACC,GAAD,OAAgBA,IAAevB,EAAIQ,UAClD,mCACA,4BC3GbqB,OAtBf,WAAoB,IAAD,EACuB9J,mBAAS,QADhC,mBACV+J,EADU,KACGC,EADH,KAcjB,OACE,6BACE,kBAAC,EAAD,CAAQD,YAAaA,EAAaC,iBAAkBA,IACpD,6BAde,WACjB,OAAQD,GACN,IAAK,SACH,OAAO,kBAACE,EAAD,MACT,IAAK,cACH,OAAO,kBAAC,GAAD,MACP,QACE,OAAO,kBAAC,GAAD,OAOLC,MCfNC,GAAS,IAAIC,IAAa,CAC9BC,QAAS,SAACC,GACR9K,QAAQC,IAAI,kBAAmB6K,GAC/B,IAAMvL,EAAQM,aAAaC,QAAQ,YACnCE,QAAQC,IAAI,6CAA8CV,GAC1DuL,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAe1L,EAAK,iBAAaA,GAAU,OAIjD2L,IAAK,aAgBQC,OAbf,WACE,OACE,kBAAC,iBAAD,CAAgBR,OAAQA,IACtB,kBAAC,IAAD,KACA,kBAAC,IAAD,KACQ,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWhB,SCf3BiB,QACW,cAA7BpL,OAAOC,SAASoL,UAEe,UAA7BrL,OAAOC,SAASoL,UAEhBrL,OAAOC,SAASoL,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjL,GACLpB,QAAQoB,MAAMA,EAAMkL,c","file":"static/js/main.c6e72219.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\nmutation addUser($username: String!, $email: String!, $password: String!, $employer: Boolean!){\n       addUser(username: $username, email: $email, password:$password, employer: $employer){\n     \ttoken\n       user {\n       \t_id\n       \tusername\n     \t}\n     }\n }\n`;\n\nexport const SAVE_JOB = gql`\n    mutation saveJob($jobId: ID!){\n        saveJob(jobId: $jobId){\n            _id\n            username\n            email\n            employer\n        }\n    }\n`;\n\nexport const SAVE_APPLICATION = gql`\n    mutation saveApplication($applicationId: ID!){\n        saveApplication(applicationId: $applicationId){\n            _id\n            username\n            email\n            employer\n        }\n    }\n`;\n\nexport const CREATE_JOB = gql`\nmutation createJob($company: String!, $contact: String!, $description: String!, $requirements: String!){\n    addJob(company: $company, contact: $contact, description: $description, requirements: $requirements){\n        _id\n        company\n        title\n        createdAt\n        contact\n        description\n        requirements\n    }\n}\n`;\n\nexport const CREATE_APP = gql`\nmutation createApplication($resume: String!, $company: String!){\n    createApplication(resume: $resume, company: $company){\n        _id\n        resume\n        email\n        createdAt\n        status\n        appliedJob{\n            _id\n            company\n            createdAt\n            contact\n            description\n            requirements\n        }\n        comments {\n            username\n            createdAt\n            body\n        }\n    }\n}\n`;\n\nexport const REMOVE_APP = gql`\nmutation removeApplication($appplicationId: ID){\n    removeApplication(applicationId: $applicationId){\n        _id\n        username\n        email\n        employer\n        createdApplications{\n            resume\n            email\n            createdAt\n            status\n            appliedJob{\n                _id\n                company\n                createdAt\n                contact\n                description\n                requirements\n            }\n            comments {\n                username\n                createdAt\n                body\n            }\n        }\n    }\n}\n`;\n\n\nexport const REMOVE_JOB = gql`\nmutation removeJob($jobId: ID){\n    removeJob(jobId: $jobId){\n        _id\n        username\n        email\n        employer\n        createdJobs{\n            company\n            title\n            createdAt\n            contact\n            description\n            requirements\n        }\n    }\n}\n`;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    console.log(\"here is our token: \", idToken);\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { ADD_USER } from '../../utils/mutations';\n//import { createUser } from '../utils/API';\nimport Auth from '../../utils/auth';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '', employer: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, {error}] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    \n    const { name, value } = event.target;\n    console.log(name, \" is being changed to: \", value);\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await addUser({\n        variables: {...userFormData}\n      });\n      console.log(\"our data is: \", data)\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n      employer: ''\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"employer\">Are you an employer?</Form.Label>\n          <Form.Control\n            as=\"select\" name=\"employer\" onChange={handleInputChange}\n            value={userFormData.employer}\n            required defaultValue=\"false\">\n              <option value='false'>No</option>\n              <option value='true'>Yes</option>\n            </Form.Control>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\n\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\nimport \"./LoginForm.css\";\n\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n\n    const { name, value } = event.target;\n    console.log(name, \" is being changed to: \", value);\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    \n    const form = event.currentTarget;\n    console.log(\"the form is: \", form);\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      console.log(\"our user data is: \", userFormData);\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      console.log(\"our data result is: \", data);\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    // <>\n    <div className=\"signup-body\">\n      <div className=\"signup-body-background\">\n        <div className=\"signup-form-lower\">\n          <h2 className=\"signup-title\">Find your next Career</h2>\n          <h3 className=\"signup-title-small\">Get started today!</h3>\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n              <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                Something went wrong with your login credentials!\n              </Alert>\n              <Form.Group>\n                <Form.Label htmlFor='email'>Email</Form.Label>\n                <Form.Control\n                  type='text'\n                  placeholder='Email'\n                  name='email'\n                  onChange={handleInputChange}\n                  value={userFormData.email}\n                  required\n                />\n                <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label htmlFor='password'>Password</Form.Label>\n                <Form.Control\n                  type='password'\n                  placeholder='Password'\n                  name='password'\n                  onChange={handleInputChange}\n                  value={userFormData.password}\n                  required\n                />\n                <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n              </Form.Group>\n              <Button disabled={!(userFormData.email && userFormData.password)} type='submit' variant='success' className='signup-login-button'>\n                Submit\n              </Button>\n            </Form>\n        </div>\n      </div>\n    </div>\n  // </>     \n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from '../Signup';\nimport LoginForm from '../Login/LoginForm';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Auth from '../../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Certainly\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Jobs\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Jobs And Applications\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchCareerJobs = (query) => {\n    return fetch(`http://api.jobs2careers.com/api/search.php?id=273&pass=HkdyhY4qQUmJXi5p&q=${query}`);\n  };\n  ","export const getSavedJobIds = () => {\n    const savedJobIds = localStorage.getItem('saved_jobs')\n      ? JSON.parse(localStorage.getItem('saved_jobs'))\n      : [];\n  \n    return savedJobIds;\n  };\n  \n  export const saveJobIds = (jobIdArr) => {\n    if (jobIdArr.length) {\n      localStorage.setItem('saved_jobs', JSON.stringify(jobIdArr));\n    } else {\n      localStorage.removeItem('saved_jobs');\n    }\n  };\n  \n  export const removeJobId = (jobId) => {\n    const savedJobIds = localStorage.getItem('saved_jobs')\n      ? JSON.parse(localStorage.getItem('saved_jobs'))\n      : null;\n  \n    if (!savedJobIds) {\n      return false;\n    }\n  \n    const updatedSavedJobIds = savedJobIds?.filter((savedJobId) => savedJobId !== jobId);\n    localStorage.setItem('saved_jobs', JSON.stringify(updatedSavedJobIds));\n  \n    return true;\n  };\n  ","import React, { Component } from 'react'\n// import PLACES from '../Common/Places';\n//import {printMessage} from '../../services/';\n\n\nclass JobSearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state ={\n      searchJobName : \"\",\n      latitude: \"\",\n      longitude:\"\"\n\n    }\n    this.onChangeSearchJob = this.onChangeSearchJob.bind(this)\n    this.onChangeLocation = this.onChangeLocation.bind(this)\n    this.checkret = this.checkret.bind(this);\n    this.route = this.route.bind(this);\n}\n\n  onChangeSearchJob(event){\n      this.setState({\n          searchJobName : event.target.value \n      })\n  }\n\n  onChangeLocation(event){\n      this.setState({\n          searchLocation : event.target.value \n      })\n  }\n\n  checkret(data)\n  {\n    console.log(\"location\",data);\n    this.setState({\n      latitude: data.coordinates.latitude,\n      longitude:data.coordinates.longitude\n    })\n    \n  }\n\n  route(e){\n    e.preventDefault();\n    console.log(\"Props\",this.props);\n    if (this.state.searchJobName && this.state.latitude && this.state.longitude){\n      window.location.href=`/searchedjobs/${this.state.searchJobName}/${this.state.latitude}/${this.state.longitude}`;\n    }\n    else \n    {\n      console.log(\"Please enter both values to proceed\");\n    }\n  }\n\n  \n  render() {\n    return (\n      <div className=\"search-box\">\n      <form>\n      <div className=\"row\">\n      <div className=\"col-sm-5\">\n            <input type=\"text\" placeholder=\"Search Jobs\" className = \"inputtext\" value={this.state.searchJobName} onChange={this.onChangeSearchJob} required />              \n      </div>\n\n      <div className=\"col-sm-5 inputtext pos-rel\">\n      {/* <PLACES onPosition={this.checkret}></PLACES> */}\n      \n      </div>\n      <div className=\"col-sm-2 searchButton\">    \n      \n      <button type=\"button\" onClick={this.route}>Search</button>\n      </div>\n      </div>\n      \n    </form>\n      </div>\n\n    )\n  }\n}\nexport default JobSearchBar;\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { searchCareerJobs } from '../utils/API';\nimport { saveJobIds, getSavedJobIds } from '../utils/localStorage';\n//import {REMOVE_BOOK, SAVE_BOOK, ADD_USER, LOGIN_USER} from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport {SAVE_JOB} from '../utils/mutations';\nimport Searchbar from '../components/Searchbar';\n//import {LOGIN_USER} from '../utils/mutations';\n\nconst SearchJobs = () => {\n  // create state for holding returned google api data\n  const [searchedJobs, setSearchedJobs] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedJobIds, setSavedJobIds] = useState(getSavedJobIds());\n  const [saveJob] = useMutation(SAVE_JOB);\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveJobIds(savedJobIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchCareerJobs(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const jobData = items.map((job) => ({\n        JobId: job._id,\n        authors: job.title || ['No author to display'],\n        company: job.company,\n        description: job.description//,\n        //image: job.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedJobs(jobData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveJob = async (jobId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const jobToSave = searchedJobs.find((job) => job.jobId === jobId);\n    console.log(\"Job to save: \", jobToSave);\n    \n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } =  await saveJob({\n        variables: {jobData: {...jobToSave}},\n      });\n      console.log(\"My lovely data: \", data);\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedJobIds([...savedJobIds, jobToSave.jobId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Jobs!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Searchbar />\n            {/* <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a Job'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row> */}\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedJobs.length\n            ? `Viewing ${searchedJobs.length} results:`\n            : 'Search for a job to begin'}\n        </h2>\n        <CardColumns>\n          {searchedJobs.map((job) => {\n            return (\n              <Card key={job.jobId} border='dark'>\n                {job.image ? (\n                  <Card.Img src={job.image} alt={`The cover for ${job.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{job.title}</Card.Title>\n                  <p className='small'>Authors: {job.authors}</p>\n                  <Card.Text>{job.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedJobIds?.some((savedJobId) => savedJobId === job.jobId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveJob(job.jobId)}>\n                      {savedJobIds?.some((savedJobId) => savedJobId === job.jobId)\n                        ? 'This job has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchJobs;\n","import React, { useState, useEffect }  from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Home.css\";\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../../utils/auth';\nimport { searchCareerJobs } from '../../utils/API';\nimport { saveJobIds, getSavedJobIds } from '../../utils/localStorage';\n//import {REMOVE_BOOK, SAVE_BOOK, ADD_USER, LOGIN_USER} from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport {SAVE_JOB} from '../../utils/mutations';\n//import {LOGIN_USER} from '../utils/mutations';\n\nconst Home = () => {\n    // create state for holding returned google api data\n    const [searchedJobs, setSearchedJobs] = useState([]);\n    // create state for holding our search field data\n    const [searchInput, setSearchInput] = useState('');\n  \n    // create state to hold saved bookId values\n    const [savedJobIds, setSavedJobIds] = useState(getSavedJobIds());\n    const [saveJob] = useMutation(SAVE_JOB);\n    // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n    // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n    useEffect(() => {\n      return () => saveJobIds(savedJobIds);\n    });\n  \n    // create method to search for books and set state on form submit\n    const handleFormSubmit = async (event) => {\n      event.preventDefault();\n  \n      if (!searchInput) {\n        return false;\n      }\n  \n      try {\n        const response = await searchCareerJobs(searchInput);\n  \n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n  \n        const { items } = await response.json();\n  \n        const jobData = items.map((job) => ({\n          JobId: job._id,\n          authors: job.title || ['No author to display'],\n          company: job.company,\n          description: job.description//,\n          //image: job.volumeInfo.imageLinks?.thumbnail || '',\n        }));\n  \n        setSearchedJobs(jobData);\n        setSearchInput('');\n      } catch (err) {\n        console.error(err);\n      }\n    };\n  \n    // create function to handle saving a book to our database\n    const handleSaveJob = async (jobId) => {\n      // find the book in `searchedBooks` state by the matching id\n      const jobToSave = searchedJobs.find((job) => job.jobId === jobId);\n      console.log(\"Job to save: \", jobToSave);\n      \n      // get token\n      const token = Auth.loggedIn() ? Auth.getToken() : null;\n      if (!token) {\n        return false;\n      }\n  \n      try {\n        const { data } =  await saveJob({\n          variables: {jobData: {...jobToSave}},\n        });\n        console.log(\"My lovely data: \", data);\n  \n        // if book successfully saves to user's account, save book id to state\n        setSavedJobIds([...savedJobIds, jobToSave.jobId]);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n  \n    return (\n      <>\n        <Jumbotron fluid className='text-light bg-dark'>\n          <Container>\n            <h1>Search for Jobs!</h1>\n            <Form onSubmit={handleFormSubmit}>\n              <Form.Row>\n                <Col xs={12} md={8}>\n                  <Form.Control\n                    name='searchInput'\n                    value={searchInput}\n                    onChange={(e) => setSearchInput(e.target.value)}\n                    type='text'\n                    size='lg'\n                    placeholder='Search for a Job'\n                  />\n                </Col>\n                <Col xs={12} md={4}>\n                  <Button type='submit' variant='success' size='lg'>\n                    Submit Search\n                  </Button>\n                </Col>\n              </Form.Row>\n            </Form>\n          </Container>\n        </Jumbotron>\n  \n        <Container>\n          <h2>\n            {searchedJobs.length\n              ? `Viewing ${searchedJobs.length} results:`\n              : 'Search for a job to begin'}\n          </h2>\n          <CardColumns>\n            {searchedJobs.map((job) => {\n              return (\n                <Card key={job.jobId} border='dark'>\n                  {job.image ? (\n                    <Card.Img src={job.image} alt={`The cover for ${job.title}`} variant='top' />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{job.title}</Card.Title>\n                    <p className='small'>Authors: {job.authors}</p>\n                    <Card.Text>{job.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedJobIds?.some((savedJobId) => savedJobId === job.jobId)}\n                        className='btn-block btn-info'\n                        onClick={() => handleSaveJob(job.jobId)}>\n                        {savedJobIds?.some((savedJobId) => savedJobId === job.jobId)\n                          ? 'This job has already been saved!'\n                          : 'Save this Book!'}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              );\n            })}\n          </CardColumns>\n        </Container>\n      </>\n    );\n  };\n\n\nexport default Home;","import React, { useState } from 'react';\nimport Navbar from './Nav/Navbar';\nimport Signup from './Signup';\nimport SearchJobs from '../pages/SearchJobs';\nimport Home from '../components/Home/Home.js'\n\nfunction Conduct() {\n  const [currentPage, handlePageChange] = useState('Home');\n\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'Signup':\n        return <Signup />;\n      case 'Search Jobs':\n        return <SearchJobs />;\n        default:\n          return <Home />;\n    }\n  };\n\n  return (\n    <div>\n      <Navbar currentPage={currentPage} handlePageChange={handlePageChange} />\n      <div>{renderPage(currentPage)}</div>\n    </div>\n  );\n}\n\nexport default Conduct;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport  ApolloClient from 'apollo-boost';\nimport Conduct from './components/Conduct';\nimport SearchJobs from '../src/pages/SearchJobs'\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    console.log(\"007 operation: \", operation)\n    const token = localStorage.getItem('id_token');\n    console.log(\"our client app.js is saying our token is: \", token)\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    });\n  },\n  uri: '/graphql'\n});\n\nfunction App (){\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <Switch>\n              <Route exact path=\"/\" component={Conduct} />\n              \n            </Switch>\n      </Router>\n      </ApolloProvider>\n  );\n} \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}